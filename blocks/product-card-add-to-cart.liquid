{% liquid
  assign product = closest.product
  if product == blank or product.available == false
    assign can_add_to_cart = false
  else
    assign can_add_to_cart = true
  endif
%}

{% if product != blank %}
  <div class="product-card-add-to-cart" data-product-id="{{ product.id }}">
    <!-- Add to cart form (works with variant selector) -->
    <form method="post" action="{{ routes.cart_add_url }}" class="product-card-atc-form" data-product-id="{{ product.id }}" data-default-label="{{ block.settings.button_text | default: 'Add to Cart' | escape }}" data-sold-out-label="{{ block.settings.sold_out_text | default: 'Sold Out' | escape }}" data-adding-label="{{ block.settings.adding_text | default: 'Adding...' | escape }}" data-added-label="{{ block.settings.added_text | default: 'Added!' | escape }}">
      <input type="hidden" name="id" class="variant-id-input" value="{{ product.selected_or_first_available_variant.id }}" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
      <input type="hidden" name="quantity" value="1">
      <button
        type="button"
        class="product-card-atc-button"
        {% unless can_add_to_cart %}disabled{% endunless %}
      >
        <span class="atc-button-icon">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M3.5 4.5L2 14.5H14L12.5 4.5H3.5Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
            <path d="M5 7V4.5C5 2.84315 6.34315 1.5 8 1.5C9.65685 1.5 11 2.84315 11 4.5V7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </span>
        <span class="atc-button-text">
          {% if can_add_to_cart %}
            {{ block.settings.button_text | default: 'Add to Cart' }}
          {% else %}
            {{ block.settings.sold_out_text | default: 'Sold Out' }}
          {% endif %}
        </span>
      </button>
    </form>
  </div>
{% endif %}

<style>
  .product-card-add-to-cart {
    width: 100%;
    margin-top: 12px;
  }

  .product-card-atc-form {
    width: 100%;
  }

  .product-card-atc-button {
    width: 100%;
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    background: #000;
    color: #fff;
    font-size: 14px;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    position: relative;
    z-index: 100;
  }

  .product-card-atc-button:hover:not(:disabled) {
    background: #333;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .product-card-atc-button:active:not(:disabled) {
    transform: translateY(0);
  }

  .product-card-atc-button:disabled {
    background: #ccc;
    color: #666;
    cursor: not-allowed;
    opacity: 0.6;
  }

  .product-card-atc-button.adding {
    pointer-events: none;
  }

  .product-card-atc-button.added {
    background: #ae5245;
  }

  .atc-button-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
  }

  .atc-button-icon svg {
    width: 16px;
    height: 16px;
  }

  .atc-button-text {
    line-height: 1;
  }

  /* Prevent carousel from interfering with button */
  .product-card-atc-button {
    pointer-events: auto !important;
  }

  @media screen and (max-width: 749px) {
    .product-card-atc-button {
      font-size: 15px;
      padding: 14px 20px;
    }
  }
</style>

<script>
  (function() {
    if (window.__productCardAtcDelegated) {
      return;
    }

    window.__productCardAtcDelegated = true;

    const FORM_SELECTOR = '.product-card-atc-form';
    const BUTTON_SELECTOR = '.product-card-atc-button';
    const BUTTON_TEXT_SELECTOR = '.atc-button-text';
    const INPUT_SELECTOR = '.variant-id-input';
    const SUBMITTING_FLAG = 'atcSubmitting';
    const RESET_KEY = '__productCardAtcResetTimer';

    function getLabel(form, attribute, fallback) {
      const value = form.getAttribute(attribute);
      return value === null || value === undefined || value === '' ? fallback : value;
    }

    function getLabels(form) {
      return {
        default: getLabel(form, 'data-default-label', 'Add to Cart'),
        soldOut: getLabel(form, 'data-sold-out-label', 'Sold Out'),
        adding: getLabel(form, 'data-adding-label', 'Adding...'),
        added: getLabel(form, 'data-added-label', 'Added!'),
        error: 'Error - Try Again'
      };
    }

    function clearResetTimer(form) {
      if (form && form[RESET_KEY]) {
        clearTimeout(form[RESET_KEY]);
        form[RESET_KEY] = null;
      }
    }

    function updateFormVariant(form, variantId, available) {
      const input = form.querySelector(INPUT_SELECTOR);
      if (input) {
        input.value = variantId;
        input.setAttribute('data-variant-id', variantId);
      }

      if (typeof available === 'boolean') {
        const button = form.querySelector(BUTTON_SELECTOR);
        const buttonText = button ? button.querySelector(BUTTON_TEXT_SELECTOR) : null;
        const labels = getLabels(form);

        if (button) {
          button.disabled = !available;
          button.classList.remove('adding', 'added');
        }

        if (buttonText) {
          buttonText.textContent = available ? labels.default : labels.soldOut;
        }

        clearResetTimer(form);
      }
    }

    async function updateCartCount(form, variantId) {
      try {
        const response = await fetch('/cart.js', {
          headers: {
            'Accept': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to fetch cart');
        }

        const cart = await response.json();
        const itemCount = cart.item_count;

        document
          .querySelectorAll('[data-cart-count], .cart-count, .cart-count-bubble__count, .cart-count-bubble span')
          .forEach((element) => {
            if (element.hasAttribute && element.hasAttribute('data-cart-count')) {
              element.setAttribute('data-cart-count', itemCount);
            }

            if (element.dataset && 'cartCount' in element.dataset) {
              element.dataset.cartCount = itemCount;
            }

            if (element.classList && element.classList.contains('hidden') && itemCount > 0) {
              element.classList.remove('hidden');
            }

            element.textContent = itemCount;
          });

        try {
          sessionStorage.setItem(
            'cart-count',
            JSON.stringify({
              value: String(itemCount),
              timestamp: Date.now()
            })
          );
        } catch (error) {
          // no-op
        }

        const eventDetail = {
          cart,
          resource: cart,
          sourceId: form.dataset.productId,
          data: {
            itemCount,
            source: 'product-card-component',
            productId: form.dataset.productId,
            variantId
          }
        };

        document.dispatchEvent(new CustomEvent('cart:update', { detail: eventDetail }));
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: eventDetail }));
      } catch (error) {
        console.error('Error updating cart count', error);
      }
    }

    async function handleAddToCart(form) {
      if (!form || form.dataset[SUBMITTING_FLAG] === 'true') {
        return;
      }

      const button = form.querySelector(BUTTON_SELECTOR);
      const buttonText = button ? button.querySelector(BUTTON_TEXT_SELECTOR) : null;
      const input = form.querySelector(INPUT_SELECTOR);
      const labels = getLabels(form);

      if (!button || !buttonText || !input || button.disabled || !input.value) {
        return;
      }

      clearResetTimer(form);

      form.dataset[SUBMITTING_FLAG] = 'true';
      button.disabled = true;
      button.classList.remove('added');
      button.classList.add('adding');
      buttonText.textContent = labels.adding;

      try {
        const payload = {
          items: [
            {
              id: Number(input.value) || input.value,
              quantity: 1
            }
          ]
        };

        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          credentials: 'same-origin',
          cache: 'no-store',
          body: JSON.stringify(payload)
        });

        if (!response.ok) {
          throw new Error('Failed to add to cart');
        }

        await response.json();

        button.classList.remove('adding');
        button.classList.add('added');
        buttonText.textContent = labels.added;

        form[RESET_KEY] = setTimeout(() => {
          button.classList.remove('added');
          button.disabled = false;
          buttonText.textContent = labels.default;
          form[RESET_KEY] = null;
        }, 1200);

        await updateCartCount(form, input.value);
      } catch (error) {
        console.error('Error adding to cart', error);

        button.classList.remove('adding');
        button.disabled = false;
        buttonText.textContent = labels.error;

        form[RESET_KEY] = setTimeout(() => {
          buttonText.textContent = labels.default;
          form[RESET_KEY] = null;
        }, 1600);
      } finally {
        form.dataset[SUBMITTING_FLAG] = 'false';
      }
    }

    document.addEventListener('click', (event) => {
      const button = event.target.closest(BUTTON_SELECTOR);
      if (!button) {
        return;
      }

      const form = button.closest(FORM_SELECTOR);
      if (!form) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();

      handleAddToCart(form);
    }, true);

    document.addEventListener('submit', (event) => {
      const form = event.target;
      if (!(form instanceof HTMLFormElement) || !form.matches(FORM_SELECTOR)) {
        return;
      }

      event.preventDefault();
      handleAddToCart(form);
    }, true);

    document.addEventListener('variant:changed', (event) => {
      const detail = event.detail || {};
      if (!detail.productId || !detail.variantId) {
        return;
      }

      document
        .querySelectorAll(FORM_SELECTOR + "[data-product-id=\"" + detail.productId + "\"]")
        .forEach((form) => updateFormVariant(form, String(detail.variantId), detail.available));
    });
  })();
</script>

{% schema %}
{
  "name": "Add to Cart Button",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "select_options_text",
      "label": "Select options text",
      "default": "Select Options"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold Out"
    },
    {
      "type": "text",
      "id": "adding_text",
      "label": "Adding to cart text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "added_text",
      "label": "Added to cart text",
      "default": "Added!"
    }
  ]
}
{% endschema %}





