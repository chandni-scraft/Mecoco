{% liquid
  assign product = closest.product
  if product == blank or product.available == false
    assign can_add_to_cart = false
  else
    assign can_add_to_cart = true
  endif
%}

{% if product != blank %}
  <div class="product-card-add-to-cart" data-product-id="{{ product.id }}">
    <!-- Add to cart form (works with variant selector) -->
    <form method="post" action="{{ routes.cart_add_url }}" class="product-card-atc-form" data-product-id="{{ product.id }}" data-default-label="{{ block.settings.button_text | default: 'Add to Cart' | escape }}" data-sold-out-label="{{ block.settings.sold_out_text | default: 'Sold Out' | escape }}" data-adding-label="{{ block.settings.adding_text | default: 'Adding...' | escape }}" data-added-label="{{ block.settings.added_text | default: 'Added!' | escape }}">
      <input type="hidden" name="id" class="variant-id-input" value="{{ product.selected_or_first_available_variant.id }}" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
      <input type="hidden" name="quantity" value="1">
      <button
        type="button"
        class="product-card-atc-button"
        {% unless can_add_to_cart %}disabled{% endunless %}
      >
        <span class="atc-button-icon">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M3.5 4.5L2 14.5H14L12.5 4.5H3.5Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
            <path d="M5 7V4.5C5 2.84315 6.34315 1.5 8 1.5C9.65685 1.5 11 2.84315 11 4.5V7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </span>
        <span class="atc-button-text">
          {% if can_add_to_cart %}
            {{ block.settings.button_text | default: 'Add to Cart' }}
          {% else %}
            {{ block.settings.sold_out_text | default: 'Sold Out' }}
          {% endif %}
        </span>
      </button>
    </form>
  </div>
{% endif %}

<style>
  .product-card-add-to-cart {
    width: 100%;
    margin-top: 12px;
  }

  .product-card-atc-form {
    width: 100%;
  }

  .product-card-atc-button {
    width: 100%;
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    background: #000;
    color: #fff;
    font-size: 14px;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    position: relative;
    z-index: 100;
  }

  .product-card-atc-button:hover:not(:disabled) {
    background: #333;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .product-card-atc-button:active:not(:disabled) {
    transform: translateY(0);
  }

  .product-card-atc-button:disabled {
    background: #ccc;
    color: #666;
    cursor: not-allowed;
    opacity: 0.6;
  }

  .product-card-atc-button.adding {
    pointer-events: none;
  }

  .product-card-atc-button.added {
    background: #ae5245;
  }

  .atc-button-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
  }

  .atc-button-icon svg {
    width: 16px;
    height: 16px;
  }

  .atc-button-text {
    line-height: 1;
  }

  /* Prevent carousel from interfering with button */
  .product-card-atc-button {
    pointer-events: auto !important;
  }

  @media screen and (max-width: 749px) {
    .product-card-atc-button {
      font-size: 15px;
      padding: 14px 20px;
    }
  }
</style>

<script>
  (function() {
    const INIT_FLAG = '__productCardAtcInitialized';
    const INIT_RUNNER = '__productCardAtcInitForms';

    if (window[INIT_FLAG]) {
      if (typeof window[INIT_RUNNER] === 'function') {
        window[INIT_RUNNER]();
      }
      return;
    }

    window[INIT_FLAG] = true;

    function getDatasetValue(element, attribute, fallback) {
      if (!element) {
        return fallback;
      }

      const value = element.getAttribute(attribute);
      if (value === null || value === undefined || value === '') {
        return fallback;
      }

      return value;
    }

    class ProductCardAddToCart {
      constructor(form) {
        this.form = form;
        this.button = form.querySelector('.product-card-atc-button');
        this.variantInput = form.querySelector('.variant-id-input');
        this.buttonText = this.button ? this.button.querySelector('.atc-button-text') : null;
        this.productId = form.dataset.productId;

        this.defaultText = getDatasetValue(form, 'data-default-label', 'Add to Cart');
        this.soldOutText = getDatasetValue(form, 'data-sold-out-label', 'Sold Out');
        this.addingText = getDatasetValue(form, 'data-adding-label', 'Adding...');
        this.addedText = getDatasetValue(form, 'data-added-label', 'Added!');
        this.errorText = 'Error - Try Again';

        this.init();
      }

      init() {
        if (!this.form || !this.button || !this.variantInput) {
          return;
        }

        this.form.addEventListener('submit', (event) => this.handleSubmit(event));

        this.inFlight = false;

        this.button.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation();
          this.handleSubmit(event);
        });

        this.button.addEventListener('mousedown', (event) => {
          event.stopPropagation();
          event.stopImmediatePropagation();
        });

        document.addEventListener('variant:changed', (event) => {
          const detail = event.detail || {};
          if (detail.productId !== this.productId) {
            return;
          }

          this.updateVariant(detail.variantId, detail.available);
        });
      }

      updateVariant(variantId, available) {
        if (!variantId) {
          return;
        }

        this.variantInput.value = variantId;
        this.variantInput.dataset.variantId = variantId;

        if (typeof available === 'boolean') {
          this.button.disabled = !available;
          if (this.buttonText) {
            this.buttonText.textContent = available ? this.defaultText : this.soldOutText;
          }
        }
      }

      async handleSubmit(event) {
        event.preventDefault();

        if (this.button.disabled || this.inFlight) {
          return;
        }

        this.inFlight = true;
        const originalText = this.buttonText ? this.buttonText.textContent : this.defaultText;
        this.button.classList.add('adding');
        this.button.disabled = true;
        if (this.buttonText) {
          this.buttonText.textContent = this.addingText;
        }

        try {
          const formData = {
            id: this.variantInput.value,
            quantity: 1
          };

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin',
            cache: 'no-store',
            body: JSON.stringify(formData)
          });

          if (!response.ok) {
            throw new Error('Failed to add to cart');
          }

          await response.json();

          this.button.classList.remove('adding');
          this.button.classList.add('added');
          if (this.buttonText) {
            this.buttonText.textContent = this.addedText;
          }

          await this.updateCartCount();

          setTimeout(() => {
            this.button.classList.remove('added');
            this.button.disabled = false;
            if (this.buttonText) {
              this.buttonText.textContent = originalText || this.defaultText;
            }
          }, 1000);
        } catch (error) {
          console.error('Error adding to cart:', error);
          this.button.classList.remove('adding');
          this.button.disabled = false;
          if (this.buttonText) {
            this.buttonText.textContent = this.errorText;
          }

          setTimeout(() => {
            if (this.buttonText) {
              this.buttonText.textContent = originalText || this.defaultText;
            }
          }, 1000);
        } finally {
          this.inFlight = false;
        }
      }

      async updateCartCount() {
        try {
          const response = await fetch('/cart.js', {
            headers: {
              'Accept': 'application/json'
            }
          });

          if (!response.ok) {
            throw new Error('Failed to fetch cart');
          }

          const cart = await response.json();
          const itemCount = cart.item_count;

          const cartCountElements = document.querySelectorAll('[data-cart-count], .cart-count, .cart-count-bubble__count, .cart-count-bubble span');
          cartCountElements.forEach((element) => {
            if (element.hasAttribute && element.hasAttribute('data-cart-count')) {
              element.setAttribute('data-cart-count', itemCount);
            }

            if (element.dataset && 'cartCount' in element.dataset) {
              element.dataset.cartCount = itemCount;
            }

            if (element.classList && element.classList.contains('hidden') && itemCount > 0) {
              element.classList.remove('hidden');
            }

            element.textContent = itemCount;
          });

          try {
            sessionStorage.setItem('cart-count', JSON.stringify({
              value: String(itemCount),
              timestamp: Date.now()
            }));
          } catch (_) {
            // no-op
          }

          const eventDetail = {
            cart,
            resource: cart,
            sourceId: this.productId,
            data: {
              itemCount,
              source: 'product-card-component',
              productId: this.productId,
              variantId: this.variantInput.value
            }
          };

          document.dispatchEvent(new CustomEvent('cart:update', { detail: eventDetail }));
          document.dispatchEvent(new CustomEvent('cart:updated', { detail: eventDetail }));
        } catch (error) {
          console.error('Error updating cart count:', error);
        }
      }
    }

    function initProductCardAddToCart() {
      const forms = document.querySelectorAll('.product-card-atc-form:not([data-atc-initialized])');

      forms.forEach((form) => {
        form.setAttribute('data-atc-initialized', 'true');
        new ProductCardAddToCart(form);
      });
    }

    window.ProductCardAddToCart = ProductCardAddToCart;
    window[INIT_RUNNER] = initProductCardAddToCart;

    document.addEventListener('DOMContentLoaded', initProductCardAddToCart);
    window.addEventListener('load', initProductCardAddToCart);

    const observer = new MutationObserver(() => {
      initProductCardAddToCart();
    });

    if (document.body) {
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }

    initProductCardAddToCart();
  })();
</script>

{% schema %}
{
  "name": "Add to Cart Button",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "select_options_text",
      "label": "Select options text",
      "default": "Select Options"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold Out"
    },
    {
      "type": "text",
      "id": "adding_text",
      "label": "Adding to cart text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "added_text",
      "label": "Added to cart text",
      "default": "Added!"
    }
  ]
}
{% endschema %}



