{% doc %}
  @prompt
    a full width video section, which will have two different video input fields, one for desktop view & one for mobile view. there should be no gaps around the video. , i want the ability to adjust the height of the section, so i can make it full height where possible 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-fullwidth-video-{{ ai_gen_id }} {
    position: relative;
    width: 100vw;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
    {% if block.settings.height_type == 'full' %}
      height: 100vh;
    {% elsif block.settings.height_type == 'custom' %}
      height: {{ block.settings.custom_height }}vh;
    {% else %}
      height: {{ block.settings.fixed_height }}px;
    {% endif %}
    overflow: hidden;
  }

  .ai-fullwidth-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .ai-fullwidth-video-element-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .ai-fullwidth-video-desktop-{{ ai_gen_id }} {
    display: block;
  }

  .ai-fullwidth-video-mobile-{{ ai_gen_id }} {
    display: none;
  }

  .ai-fullwidth-video-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    gap: 16px;
  }

  .ai-fullwidth-video-placeholder-{{ ai_gen_id }} svg {
    width: 80px;
    height: 80px;
    opacity: 0.5;
  }

  .ai-fullwidth-video-empty-state-{{ ai_gen_id }} {
    color: #666;
    font-size: 16px;
    text-align: center;
    max-width: 300px;
    line-height: 1.4;
  }

  .ai-fullwidth-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 2;
    display: flex;
    gap: 10px;
  }

  .ai-fullwidth-video-control-btn-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .ai-fullwidth-video-control-btn-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-fullwidth-video-control-btn-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  @media screen and (max-width: 749px) {
    .ai-fullwidth-video-desktop-{{ ai_gen_id }} {
      display: none;
    }

    .ai-fullwidth-video-mobile-{{ ai_gen_id }} {
      display: block;
    }

    .ai-fullwidth-video-{{ ai_gen_id }} {
      {% if block.settings.mobile_height_type == 'full' %}
        height: 100vh;
      {% elsif block.settings.mobile_height_type == 'custom' %}
        height: {{ block.settings.mobile_custom_height }}vh;
      {% else %}
        height: {{ block.settings.mobile_fixed_height }}px;
      {% endif %}
    }

    .ai-fullwidth-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-fullwidth-video-control-btn-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-fullwidth-video-control-btn-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstyle %}

<fullwidth-video-{{ ai_gen_id }}
  class="ai-fullwidth-video-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-fullwidth-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.desktop_video != blank or block.settings.mobile_video != blank %}
      {% if block.settings.desktop_video != blank %}
        <video
          class="ai-fullwidth-video-element-{{ ai_gen_id }} ai-fullwidth-video-desktop-{{ ai_gen_id }}"
          {% if block.settings.autoplay %}autoplay{% endif %}
          {% if block.settings.loop %}loop{% endif %}
          {% if block.settings.muted %}muted{% endif %}
          {% unless block.settings.show_controls %}controls="false"{% endunless %}
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.desktop_video }}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      {% endif %}

      {% if block.settings.mobile_video != blank %}
        <video
          class="ai-fullwidth-video-element-{{ ai_gen_id }} ai-fullwidth-video-mobile-{{ ai_gen_id }}"
          {% if block.settings.autoplay %}autoplay{% endif %}
          {% if block.settings.loop %}loop{% endif %}
          {% if block.settings.muted %}muted{% endif %}
          {% unless block.settings.show_controls %}controls="false"{% endunless %}
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.mobile_video }}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      {% elsif block.settings.desktop_video != blank %}
        <video
          class="ai-fullwidth-video-element-{{ ai_gen_id }} ai-fullwidth-video-mobile-{{ ai_gen_id }}"
          {% if block.settings.autoplay %}autoplay{% endif %}
          {% if block.settings.loop %}loop{% endif %}
          {% if block.settings.muted %}muted{% endif %}
          {% unless block.settings.show_controls %}controls="false"{% endunless %}
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.desktop_video }}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      {% endif %}

      {% unless block.settings.show_controls %}
        <div class="ai-fullwidth-video-controls-{{ ai_gen_id }}">
          <button
            class="ai-fullwidth-video-control-btn-{{ ai_gen_id }} ai-play-pause-btn-{{ ai_gen_id }}"
            aria-label="Play/Pause video"
          >
            <svg class="ai-play-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
              <path d="M8 5v14l11-7z"/>
            </svg>
            <svg class="ai-pause-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
              <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
            </svg>
          </button>
          {% if block.settings.show_mute_button %}
            <button
              class="ai-fullwidth-video-control-btn-{{ ai_gen_id }} ai-mute-btn-{{ ai_gen_id }}"
              aria-label="Mute/Unmute video"
            >
              <svg class="ai-unmute-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
              </svg>
              <svg class="ai-mute-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
                <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
              </svg>
            </button>
          {% endif %}
        </div>
      {% endunless %}
    {% else %}
      <div class="ai-fullwidth-video-placeholder-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="23 7 16 12 23 17 23 7"></polygon>
          <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
        </svg>
        <div class="ai-fullwidth-video-empty-state-{{ ai_gen_id }}">
          Add your desktop and mobile videos to get started
        </div>
      </div>
    {% endif %}
  </div>
</fullwidth-video-{{ ai_gen_id }}>

<script>
  (function() {
    class FullwidthVideo{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.videos = this.querySelectorAll('.ai-fullwidth-video-element-{{ ai_gen_id }}');
        this.playPauseBtn = this.querySelector('.ai-play-pause-btn-{{ ai_gen_id }}');
        this.muteBtn = this.querySelector('.ai-mute-btn-{{ ai_gen_id }}');
        this.playIcon = this.querySelector('.ai-play-icon-{{ ai_gen_id }}');
        this.pauseIcon = this.querySelector('.ai-pause-icon-{{ ai_gen_id }}');
        this.unmuteIcon = this.querySelector('.ai-unmute-icon-{{ ai_gen_id }}');
        this.muteIcon = this.querySelector('.ai-mute-icon-{{ ai_gen_id }}');

        this.setupEventListeners();
        this.updateControlsVisibility();
      }

      setupEventListeners() {
        if (this.playPauseBtn) {
          this.playPauseBtn.addEventListener('click', () => {
            this.togglePlayPause();
          });
        }

        if (this.muteBtn) {
          this.muteBtn.addEventListener('click', () => {
            this.toggleMute();
          });
        }

        this.videos.forEach(video => {
          video.addEventListener('play', () => {
            this.updatePlayPauseIcon(true);
          });

          video.addEventListener('pause', () => {
            this.updatePlayPauseIcon(false);
          });

          video.addEventListener('volumechange', () => {
            this.updateMuteIcon(video.muted);
          });
        });
      }

      getCurrentVideo() {
        return Array.from(this.videos).find(video => {
          const style = window.getComputedStyle(video);
          return style.display !== 'none';
        });
      }

      togglePlayPause() {
        const currentVideo = this.getCurrentVideo();
        if (!currentVideo) return;

        if (currentVideo.paused) {
          currentVideo.play();
        } else {
          currentVideo.pause();
        }
      }

      toggleMute() {
        const currentVideo = this.getCurrentVideo();
        if (!currentVideo) return;

        currentVideo.muted = !currentVideo.muted;
      }

      updatePlayPauseIcon(isPlaying) {
        if (!this.playIcon || !this.pauseIcon) return;

        if (isPlaying) {
          this.playIcon.style.display = 'none';
          this.pauseIcon.style.display = 'block';
        } else {
          this.playIcon.style.display = 'block';
          this.pauseIcon.style.display = 'none';
        }
      }

      updateMuteIcon(isMuted) {
        if (!this.unmuteIcon || !this.muteIcon) return;

        if (isMuted) {
          this.unmuteIcon.style.display = 'none';
          this.muteIcon.style.display = 'block';
        } else {
          this.unmuteIcon.style.display = 'block';
          this.muteIcon.style.display = 'none';
        }
      }

      updateControlsVisibility() {
        this.videos.forEach(video => {
          const isPlaying = !video.paused;
          this.updatePlayPauseIcon(isPlaying);
          this.updateMuteIcon(video.muted);
        });
      }
    }

    customElements.define('fullwidth-video-{{ ai_gen_id }}', FullwidthVideo{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Full width video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video files"
    },
    {
      "type": "url",
      "id": "desktop_video",
      "label": "Desktop video URL"
    },
    {
      "type": "url",
      "id": "mobile_video",
      "label": "Mobile video URL"
    },
    {
      "type": "header",
      "content": "Desktop height"
    },
    {
      "type": "select",
      "id": "height_type",
      "label": "Height type",
      "options": [
        {
          "value": "full",
          "label": "Full viewport height"
        },
        {
          "value": "custom",
          "label": "Custom viewport height"
        },
        {
          "value": "fixed",
          "label": "Fixed pixel height"
        }
      ],
      "default": "full"
    },
    {
      "type": "range",
      "id": "custom_height",
      "min": 20,
      "max": 100,
      "step": 5,
      "unit": "vh",
      "label": "Custom height",
      "default": 60
    },
    {
      "type": "range",
      "id": "fixed_height",
      "min": 200,
      "max": 1000,
      "step": 50,
      "unit": "px",
      "label": "Fixed height",
      "default": 600
    },
    {
      "type": "header",
      "content": "Mobile height"
    },
    {
      "type": "select",
      "id": "mobile_height_type",
      "label": "Height type",
      "options": [
        {
          "value": "full",
          "label": "Full viewport height"
        },
        {
          "value": "custom",
          "label": "Custom viewport height"
        },
        {
          "value": "fixed",
          "label": "Fixed pixel height"
        }
      ],
      "default": "custom"
    },
    {
      "type": "range",
      "id": "mobile_custom_height",
      "min": 20,
      "max": 100,
      "step": 5,
      "unit": "vh",
      "label": "Custom height",
      "default": 50
    },
    {
      "type": "range",
      "id": "mobile_fixed_height",
      "min": 200,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Fixed height",
      "default": 400
    },
    {
      "type": "header",
      "content": "Video settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay video",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Loop video",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "muted",
      "label": "Mute video by default",
      "default": true
    },
    {
      "type": "header",
      "content": "Video controls"
    },
    {
      "type": "checkbox",
      "id": "show_controls",
      "label": "Show native video controls",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_mute_button",
      "label": "Show mute button",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Full width video"
    }
  ]
}
{% endschema %}