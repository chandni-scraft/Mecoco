{% liquid
  assign product = closest.product
  if product == blank or product.variants.size == 0
    assign show_block = false
  else
    assign show_block = true
    assign current_variant = product.selected_or_first_available_variant
  endif
%}

{% if show_block %}
  <div class="product-variant-atc-block" data-product-id="{{ product.id }}">
    <!-- Variant Dropdowns -->
    {% if product.variants.size > 1 %}
      <div class="variant-dropdowns">
        {% for option in product.options_with_values %}
          <div class="variant-option-wrapper">
            {% if block.settings.show_labels %}
              <label class="variant-option-label">{{ option.name }}</label>
            {% endif %}
            <select 
              class="variant-option-select" 
              data-option-index="{{ forloop.index0 }}"
              data-option-name="{{ option.name }}"
            >
              {% for value in option.values %}
                <option 
                  value="{{ value | escape }}"
                  {% if current_variant.options[forloop.index0] == value %}selected{% endif %}
                >
                  {{ value }}
                </option>
              {% endfor %}
            </select>
          </div>
        {% endfor %}
      </div>
    {% endif %}
    
    <!-- Add to Cart Form -->
    <form class="variant-atc-form" action="/cart/add" method="post">
      <input type="hidden" name="id" class="variant-id-input" value="{{ current_variant.id }}">
      <input type="hidden" name="quantity" value="1">
      
      <button type="submit" class="variant-atc-button" {% unless current_variant.available %}disabled{% endunless %}>
        {% if current_variant.available %}
          {{ block.settings.button_text }}
        {% else %}
          {{ block.settings.sold_out_text }}
        {% endif %}
      </button>
    </form>
    
    <!-- Hidden select for all variants data -->
    <select class="all-variants-data" style="display: none;">
      {% for variant in product.variants %}
        <option 
          value="{{ variant.id }}"
          data-price="{{ variant.price | money }}"
          data-available="{{ variant.available }}"
          data-options="{{ variant.options | join: '||' }}"
        >
          {{ variant.title }}
        </option>
      {% endfor %}
    </select>
  </div>
{% endif %}

<style>
  .product-variant-atc-block {
    padding: 12px 0;
  }

  .variant-dropdowns {
    margin-bottom: 12px;
  }

  .variant-option-wrapper {
    margin-bottom: 10px;
  }

  .variant-option-wrapper:last-child {
    margin-bottom: 0;
  }

  .variant-option-label {
    display: block;
    font-size: 12px;
    font-weight: 500;
    margin-bottom: 6px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: rgba(0,0,0,0.75);
  }

  .variant-option-select {
    width: 100%;
    padding: 10px 35px 10px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #fff;
    font-size: 14px;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg width='10' height='6' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0l5 6 5-6z' fill='%23333'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 10px 6px;
    transition: border-color 0.2s;
  }

  .variant-option-select:hover {
    border-color: #999;
  }

  .variant-option-select:focus {
    outline: none;
    border-color: #333;
  }

  .variant-atc-form {
    margin-top: 12px;
  }

  .variant-atc-button {
    width: 100%;
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    background-color: #000;
    color: #fff;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .variant-atc-button:hover:not(:disabled) {
    background-color: #333;
    transform: translateY(-1px);
  }

  .variant-atc-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    opacity: 0.7;
  }

  .variant-atc-button.loading {
    pointer-events: none;
    opacity: 0.7;
  }

  @media (max-width: 749px) {
    .variant-option-select,
    .variant-atc-button {
      font-size: 16px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const blocks = document.querySelectorAll('.product-variant-atc-block');
    
    blocks.forEach(block => {
      const selects = block.querySelectorAll('.variant-option-select');
      const variantInput = block.querySelector('.variant-id-input');
      const variantsData = block.querySelector('.all-variants-data');
      const form = block.querySelector('.variant-atc-form');
      const button = block.querySelector('.variant-atc-button');
      const productId = block.dataset.productId;
      
      // Handle variant selection
      selects.forEach(select => {
        select.addEventListener('change', () => {
          const selectedOptions = Array.from(selects).map(s => s.value);
          const selectedVariant = findVariant(selectedOptions);
          
          if (selectedVariant) {
            // Update hidden input
            variantInput.value = selectedVariant.value;
            
            // Update button state
            const isAvailable = selectedVariant.dataset.available === 'true';
            button.disabled = !isAvailable;
            button.textContent = isAvailable ? '{{ block.settings.button_text }}' : '{{ block.settings.sold_out_text }}';
            
            // Update product card link
            updateProductCardLink(block, selectedVariant.value);
            
            // Log for debugging
            console.log('Selected variant:', selectedVariant.value, 'Available:', isAvailable);
          }
        });
      });
      
      // Find variant by options
      function findVariant(options) {
        const optionsString = options.join('||');
        return Array.from(variantsData.options).find(option => {
          return option.dataset.options === optionsString;
        });
      }
      
      // Update product card link
      function updateProductCardLink(block, variantId) {
        const productCard = block.closest('product-card');
        const productLink = productCard?.querySelector('.product-card__link');
        
        if (productLink && variantId) {
          const url = new URL(productLink.href, window.location.origin);
          url.searchParams.set('variant', variantId);
          productLink.href = url.toString();
        }
      }
      
      // Handle form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const originalText = button.textContent;
        button.textContent = '{{ block.settings.adding_text }}';
        button.classList.add('loading');
        
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: new URLSearchParams(new FormData(form))
        })
        .then(response => response.json())
        .then(data => {
          button.textContent = '{{ block.settings.added_text }}';
          
          // Update cart count if exists
          const cartCount = document.querySelector('.cart-count, .cart-count-bubble');
          if (cartCount) {
            fetch('/cart.js')
              .then(r => r.json())
              .then(cart => {
                cartCount.textContent = cart.item_count;
              });
          }
          
          setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('loading');
          }, 2000);
        })
        .catch(error => {
          console.error('Error:', error);
          button.textContent = 'Error - Try Again';
          button.classList.remove('loading');
          
          setTimeout(() => {
            button.textContent = originalText;
          }, 2000);
        });
      });
    });
  });
</script>

{% schema %}
{
  "name": "Variant & Add to Cart",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show option labels",
      "default": true
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold Out"
    },
    {
      "type": "text",
      "id": "adding_text",
      "label": "Adding text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "added_text",
      "label": "Added text",
      "default": "Added!"
    }
  ]
}
{% endschema %}