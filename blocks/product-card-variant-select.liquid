{% liquid
  assign product = closest.product
  assign show_selects = false

  if product != blank and product.variants.size > 1
    assign show_selects = true
    assign current_variant = product.selected_or_first_available_variant
  endif
%}

{% if show_selects %}

<div class="product-variant-selects" data-product-id="{{ product.id }}">
  {% for option in product.options_with_values %}
    <div class="variant-select-wrapper">
      {% if block.settings.show_labels %}
        <label class="variant-select-label">{{ option.name }}</label>
      {% endif %}
      <div class="select-container">
        <select
          class="variant-select"
          data-option-name="{{ option.name }}"
          data-option-position="{{ option.position }}"
        >
          {% for value in option.values %}
            <option
              value="{{ value | escape }}"
              {% if current_variant.options[forloop.index0] == value %}selected{% endif %}
            >
              {{ value }}
            </option>
          {% endfor %}
        </select>
        <svg class="select-arrow" width="10" height="6" viewBox="0 0 10 6" fill="none">
          <path d="M1 1L5 5L9 1" stroke="currentColor" stroke-width="1.5"/>
        </svg>
      </div>
    </div>
  {% endfor %}

  <select class="variant-id-select" style="display: none;">
    {% for variant in product.variants %}
      <option
        value="{{ variant.id }}"
        data-variant-options="{{ variant.options | join: '||' }}"
        data-available="{{ variant.available }}"
        {% if variant.id == current_variant.id %}selected{% endif %}
      >
        {{ variant.title }}
      </option>
    {% endfor %}
  </select>
</div>

<style>
  .product-variant-selects {
    padding: 10px 0;
    position: relative;
    z-index: 100;
  }

  .product-variant-selects:hover ~ * {
    pointer-events: none !important;
  }

  .product-variant-selects * {
    pointer-events: auto !important;
  }

  .variant-select-wrapper {
    margin-bottom: 12px;
  }

  .variant-select-wrapper:last-child {
    margin-bottom: 0;
  }

  .variant-select-label {
    display: block;
    font-size: 12px;
    font-weight: 500;
    margin-bottom: 6px;
    color: #333;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .select-container {
    position: relative;
    width: 100%;
  }

  .variant-select {
    width: 100%;
    padding: 10px 32px 10px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    font-size: 14px;
    color: #333;
    cursor: pointer;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    outline: none;
    transition: border-color 0.2s;
    position: relative;
    z-index: 1;
  }

  .variant-select:hover {
    border-color: #999;
  }

  .variant-select:focus {
    border-color: #333;
  }

  .select-arrow {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #666;
  }

  .variant-select option {
    padding: 8px;
    background: white;
    color: #333;
  }

  .variant-select option:hover {
    background: #f5f5f5;
  }

  .variant-select::-webkit-select {
    background: white;
  }

  @media (max-width: 749px) {
    .variant-select {
      font-size: 16px;
      padding: 12px 32px 12px 12px;
      -webkit-appearance: none;
    }
  }
</style>

<script>
  class ProductVariantSelects {
    constructor(container) {
      this.container = container;
      this.productId = container.dataset.productId;
      this.selects = container.querySelectorAll('.variant-select');
      this.variantIdSelect = container.querySelector('.variant-id-select');

      this.init();
    }

    init() {
      this.selects.forEach(select => {
        select.addEventListener('change', () => this.onOptionChange());

        select.addEventListener('click', this.stopPropagation, true);
        select.addEventListener('mousedown', this.stopPropagation, true);
        select.addEventListener('touchstart', this.stopPropagation, { passive: false, capture: true });
      });

      this.container.addEventListener('click', (e) => {
        if (e.target.classList.contains('variant-select') ||
            e.target.tagName === 'OPTION') {
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      });

      this.syncInitialState();
    }

    stopPropagation(event) {
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    syncLocalAddToCart(variantId, available) {
      var productCard = this.container.closest('product-card');
      if (!productCard) {
        return;
      }

      var form = productCard.querySelector('.product-card-atc-form');
      if (form) {
        var variantInput = form.querySelector('.variant-id-input');
        if (variantInput) {
          variantInput.value = variantId;
          variantInput.setAttribute('data-variant-id', variantId);
        }

        var button = form.querySelector('.product-card-atc-button');
        if (button) {
          if (typeof available === 'boolean') {
            button.disabled = !available;
          }

          var buttonText = button.querySelector('.atc-button-text');
          if (buttonText) {
            buttonText.textContent = available ? 'Add to Cart' : 'Sold Out';
          }
        }
      }
    }

    onOptionChange() {
      var selectedOptions = Array.from(this.selects).map(function(select) {
        return select.value;
      });
      var selectedVariant = this.findVariantByOptions(selectedOptions);

      if (!selectedVariant && this.variantIdSelect) {
        var fallbackOptions = Array.from(this.variantIdSelect.options);
        selectedVariant = fallbackOptions.find(function(option) {
          return option.dataset.available === 'true';
        }) || fallbackOptions[0] || null;
      }

      if (!selectedVariant) {
        return;
      }

      this.variantIdSelect.value = selectedVariant.value;
      this.setSelectedOption(selectedVariant.value);
      this.updateProductCard(selectedVariant.value);

      var isAvailable = selectedVariant.dataset.available === 'true';
      this.syncLocalAddToCart(selectedVariant.value, isAvailable);

      document.dispatchEvent(new CustomEvent('variant:changed', {
        detail: {
          productId: this.productId,
          variantId: selectedVariant.value,
          available: isAvailable
        }
      }));
    }

    syncInitialState() {
      if (!this.variantIdSelect) {
        return;
      }

      var selectedOption = this.variantIdSelect.selectedOptions[0];
      if (!selectedOption) {
        return;
      }

      var isAvailable = selectedOption.dataset.available === 'true';
      this.syncLocalAddToCart(selectedOption.value, isAvailable);

      document.dispatchEvent(new CustomEvent('variant:changed', {
        detail: {
          productId: this.productId,
          variantId: selectedOption.value,
          available: isAvailable
        }
      }));
    }

    setSelectedOption(variantId) {
      if (!this.variantIdSelect) {
        return;
      }

      Array.from(this.variantIdSelect.options).forEach(option => {
        option.selected = option.value === variantId;
      });
    }

    findVariantByOptions(options) {
      if (!this.variantIdSelect) {
        return null;
      }

      var normalizedOptions = options.map(function(value) {
        return (value || '').toString().trim().toLowerCase();
      });

      return (
        Array.from(this.variantIdSelect.options).find(function(option) {
          var optionData = option.dataset.variantOptions;
          if (!optionData) {
            return false;
          }

          var candidate = optionData.split('||').map(function(value) {
            return value.trim().toLowerCase();
          });

          if (candidate.length !== normalizedOptions.length) {
            return false;
          }

          for (var index = 0; index < candidate.length; index += 1) {
            if (candidate[index] !== normalizedOptions[index]) {
              return false;
            }
          }

          return true;
        }) || null
      );
    }

    updateProductCard(variantId) {
      var productCard = this.container.closest('product-card');
      if (!productCard) {
        return;
      }

      var productLink = productCard.querySelector('.product-card__link');

      if (productLink && variantId) {
        var url = new URL(productLink.href, window.location.origin);
        url.searchParams.set('variant', variantId);
        productLink.href = url.toString();
      }

      this.container.dispatchEvent(new CustomEvent('variant:change', {
        detail: { variantId: variantId },
        bubbles: true
      }));
    }
  }

  function initializeVariantSelect(container) {
    if (container.hasAttribute('data-variant-initialized')) return;
    container.setAttribute('data-variant-initialized', 'true');
    new ProductVariantSelects(container);
  }

  function initializeAllVariantSelects() {
    const containers = document.querySelectorAll('.product-variant-selects:not([data-variant-initialized])');
    containers.forEach(initializeVariantSelect);
  }

  document.addEventListener('DOMContentLoaded', () => {
    initializeAllVariantSelects();

    document.addEventListener('click', function(e) {
      if (e.target.closest('.product-variant-selects')) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, true);

    const observer = new MutationObserver(() => {
      setTimeout(initializeAllVariantSelects, 100);
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    const visibilityObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target
            .querySelectorAll('.product-variant-selects:not([data-variant-initialized])')
            .forEach(initializeVariantSelect);
        }
      });
    }, {
      rootMargin: '50px'
    });

    document.querySelectorAll('.section-resource-list, .product-list, .resource-list').forEach(section => {
      visibilityObserver.observe(section);
    });
  });

  window.addEventListener('load', initializeAllVariantSelects);
</script>

{% endif %}

{% schema %}
{
  "name": "Variant Select",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show option labels",
      "default": true
    }
  ]
}
{% endschema %}

