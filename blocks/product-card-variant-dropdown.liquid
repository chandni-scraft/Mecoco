{% liquid
  assign product = closest.product
  assign show_dropdown = false
  
  if product != blank and product.variants.size > 1
    assign show_dropdown = true
  endif
%}

{% if show_dropdown %}
  <variant-dropdown-component 
    class="product-card-variant-dropdown"
    data-product-id="{{ product.id }}"
    data-section-id="{{ section.id }}"
  >
    <form class="variant-dropdown-form">
      {% for option in product.options_with_values %}
        <div class="variant-dropdown__option">
          {% if block.settings.show_option_labels %}
            <label for="variant-dropdown-{{ product.id }}-{{ forloop.index0 }}" class="variant-dropdown__label">
              {{ option.name }}
            </label>
          {% endif %}
          <select 
            id="variant-dropdown-{{ product.id }}-{{ forloop.index0 }}"
            name="options[{{ option.name | escape }}]"
            class="variant-dropdown__select variant-dropdown__select--{{ block.settings.dropdown_style }}"
            data-option-index="{{ forloop.index0 }}"
          >
            {% for value in option.values %}
              <option 
                value="{{ value | escape }}"
                {% if option.selected_value == value %}selected{% endif %}
              >
                {{ value | escape }}
              </option>
            {% endfor %}
          </select>
        </div>
      {% endfor %}
      
      <select name="id" class="variant-dropdown__id" style="display: none;">
        {% for variant in product.variants %}
          <option 
            value="{{ variant.id }}"
            data-options="{{ variant.options | join: ',' | escape }}"
            {% unless variant.available %}disabled{% endunless %}
            {% if variant == product.selected_or_first_available_variant %}selected{% endif %}
          >
            {{ variant.title | escape }}
          </option>
        {% endfor %}
      </select>
    </form>
  </variant-dropdown-component>
{% endif %}

<script>
class VariantDropdownComponent extends HTMLElement {
  constructor() {
    super();
  }
  
  connectedCallback() {
    this.productId = this.dataset.productId;
    this.form = this.querySelector('form');
    this.optionSelects = this.querySelectorAll('[data-option-index]');
    this.variantSelect = this.querySelector('.variant-dropdown__id');
    
    // Debug logging
    console.log('Variant dropdown initialized for product:', this.productId);
    console.log('Found selects:', this.optionSelects.length);
    
    this.optionSelects.forEach(select => {
      select.addEventListener('change', this.onOptionChange.bind(this));
      
      // Test click event
      select.addEventListener('click', () => {
        console.log('Dropdown clicked');
      });
    });
  }
  
  onOptionChange() {
    const selectedOptions = Array.from(this.optionSelects).map(select => select.value);
    const selectedVariant = this.getVariantFromOptions(selectedOptions);
    
    if (selectedVariant) {
      this.variantSelect.value = selectedVariant.value;
      this.updateProductCard(selectedVariant.value);
    }
  }
  
  getVariantFromOptions(options) {
    const optionsString = options.join(',');
    return Array.from(this.variantSelect.options).find(option => {
      return option.dataset.options === optionsString;
    });
  }
  
  updateProductCard(variantId) {
    // Update the product card link
    const productCard = this.closest('product-card');
    const productCardLink = productCard?.querySelector('.product-card__link');
    
    if (productCardLink && variantId) {
      const currentUrl = new URL(productCardLink.href, window.location.origin);
      currentUrl.searchParams.set('variant', variantId);
      productCardLink.href = currentUrl.toString();
    }
    
    // Dispatch event for other components to listen to
    const event = new CustomEvent('variantChange', {
      detail: { variantId: variantId },
      bubbles: true
    });
    this.dispatchEvent(event);
  }
}

if (!customElements.get('variant-dropdown-component')) {
  customElements.define('variant-dropdown-component', VariantDropdownComponent);
}
</script>

<style>
  .product-card-variant-dropdown {
    width: 100%;
    padding: 0.5rem 0;
    position: relative;
  }
  
  /* Ensure dropdowns are not cut off */
  .product-card__content {
    overflow: visible !important;
  }
  
  .variant-dropdown-form {
    position: relative;
    z-index: 1;
  }
  
  .variant-dropdown__option {
    margin-bottom: 0.5rem;
  }
  
  .variant-dropdown__option:last-child {
    margin-bottom: 0;
  }
  
  .variant-dropdown__label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
    color: var(--color-foreground-secondary);
  }
  
  .variant-dropdown__select {
    width: 100%;
    padding: 0.5rem;
    padding-right: 2rem;
    border: 1px solid var(--color-border, #e5e5e5);
    border-radius: var(--border-radius-base, 4px);
    background-color: var(--color-background, #fff);
    color: var(--color-foreground, #000);
    font-size: 0.875rem;
    cursor: pointer;
    transition: border-color 0.2s ease;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='7' viewBox='0 0 12 7'%3E%3Cpath fill='%23000' d='M0 0l6 7 6-7z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.7rem center;
    background-size: 12px;
    position: relative;
    z-index: 1;
  }
  
  .variant-dropdown__select:hover {
    border-color: var(--color-foreground);
  }
  
  .variant-dropdown__select:focus {
    outline: none;
    border-color: var(--color-foreground);
    box-shadow: 0 0 0 2px rgba(var(--color-foreground-rgb), 0.1);
  }
  
  /* Minimal style */
  .variant-dropdown__select--minimal {
    border: none;
    border-bottom: 1px solid var(--color-border);
    border-radius: 0;
    padding-left: 0;
    padding-right: 1.5rem;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='7' viewBox='0 0 12 7'%3E%3Cpath fill='%23666' d='M0 0l6 7 6-7z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
  }
  
  .variant-dropdown__select--minimal:hover,
  .variant-dropdown__select--minimal:focus {
    border-bottom-color: var(--color-foreground);
  }
  
  /* Rounded style */
  .variant-dropdown__select--rounded {
    border-radius: 2rem;
  }
  
  @media screen and (max-width: 749px) {
    .variant-dropdown__select {
      font-size: 1rem;
    }
  }
</style>

{% schema %}
{
  "name": "Variant Dropdown",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_option_labels",
      "label": "Show option labels",
      "default": true
    },
    {
      "type": "select",
      "id": "dropdown_style",
      "label": "Dropdown style",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "minimal",
          "label": "Minimal"
        },
        {
          "value": "rounded",
          "label": "Rounded"
        }
      ],
      "default": "default"
    }
  ]
}
{% endschema %}