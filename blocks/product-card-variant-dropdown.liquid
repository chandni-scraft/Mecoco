{% liquid
  assign product = closest.product
  if product == blank
    exit
  endif
  
  # Only show if product has variants
  if product.variants.size <= 1
    exit
  endif
%}

<variant-dropdown-component 
  class="product-card-variant-dropdown"
  data-product-id="{{ product.id }}"
  data-section-id="{{ section.id }}"
>
  <form class="variant-dropdown-form">
    {% for option in product.options_with_values %}
      <div class="variant-dropdown__option">
        <label for="variant-dropdown-{{ product.id }}-{{ forloop.index0 }}" class="variant-dropdown__label">
          {{ option.name }}
        </label>
        <select 
          id="variant-dropdown-{{ product.id }}-{{ forloop.index0 }}"
          name="options[{{ option.name | escape }}]"
          class="variant-dropdown__select"
          data-option-index="{{ forloop.index0 }}"
        >
          {% for value in option.values %}
            <option 
              value="{{ value | escape }}"
              {% if option.selected_value == value %}selected{% endif %}
            >
              {{ value | escape }}
            </option>
          {% endfor %}
        </select>
      </div>
    {% endfor %}
    
    <select name="id" class="variant-dropdown__id" style="display: none;">
      {% for variant in product.variants %}
        <option 
          value="{{ variant.id }}"
          data-options="{{ variant.options | join: ',' | escape }}"
          {% unless variant.available %}disabled{% endunless %}
          {% if variant == product.selected_or_first_available_variant %}selected{% endif %}
        >
          {{ variant.title | escape }}
        </option>
      {% endfor %}
    </select>
  </form>
</variant-dropdown-component>

<script>
class VariantDropdownComponent extends HTMLElement {
  constructor() {
    super();
    this.productId = this.dataset.productId;
    this.form = this.querySelector('form');
    this.optionSelects = this.querySelectorAll('[data-option-index]');
    this.variantSelect = this.querySelector('.variant-dropdown__id');
    
    this.optionSelects.forEach(select => {
      select.addEventListener('change', this.onOptionChange.bind(this));
    });
  }
  
  onOptionChange() {
    const selectedOptions = Array.from(this.optionSelects).map(select => select.value);
    const selectedVariant = this.getVariantFromOptions(selectedOptions);
    
    if (selectedVariant) {
      this.variantSelect.value = selectedVariant.value;
      this.updateProductCard(selectedVariant.value);
    }
  }
  
  getVariantFromOptions(options) {
    const optionsString = options.join(',');
    return Array.from(this.variantSelect.options).find(option => {
      return option.dataset.options === optionsString;
    });
  }
  
  updateProductCard(variantId) {
    // Update the product card link
    const productCard = this.closest('product-card');
    const productCardLink = productCard?.querySelector('.product-card__link');
    
    if (productCardLink && variantId) {
      const currentUrl = new URL(productCardLink.href, window.location.origin);
      currentUrl.searchParams.set('variant', variantId);
      productCardLink.href = currentUrl.toString();
    }
    
    // Dispatch event for other components to listen to
    const event = new CustomEvent('variantChange', {
      detail: { variantId: variantId },
      bubbles: true
    });
    this.dispatchEvent(event);
  }
}

if (!customElements.get('variant-dropdown-component')) {
  customElements.define('variant-dropdown-component', VariantDropdownComponent);
}
</script>

<style>
  .product-card-variant-dropdown {
    width: 100%;
    padding: 0.5rem 0;
  }
  
  .variant-dropdown__option {
    margin-bottom: 0.5rem;
  }
  
  .variant-dropdown__option:last-child {
    margin-bottom: 0;
  }
  
  .variant-dropdown__label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
    color: var(--color-foreground-secondary);
  }
  
  .variant-dropdown__select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-base);
    background-color: var(--color-background);
    color: var(--color-foreground);
    font-size: 0.875rem;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }
  
  .variant-dropdown__select:hover {
    border-color: var(--color-foreground);
  }
  
  .variant-dropdown__select:focus {
    outline: none;
    border-color: var(--color-foreground);
    box-shadow: 0 0 0 2px rgba(var(--color-foreground-rgb), 0.1);
  }
  
  @media screen and (max-width: 749px) {
    .variant-dropdown__select {
      font-size: 1rem;
    }
  }
</style>

{% schema %}
{
  "name": "Variant Dropdown",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_option_labels",
      "label": "Show option labels",
      "default": true
    },
    {
      "type": "select",
      "id": "dropdown_style",
      "label": "Dropdown style",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "minimal",
          "label": "Minimal"
        },
        {
          "value": "rounded",
          "label": "Rounded"
        }
      ],
      "default": "default"
    }
  ]
}
{% endschema %}