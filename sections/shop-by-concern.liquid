{% comment %}
  Shop by Concern Section
  - Tabs for multiple collections (blocks)
  - Mobile: tabs are horizontally scrollable, no overflow
  - Settings: container width, heading, products per tab, grid options
{% endcomment %}

{% liquid
  assign section_id = section.id
  assign heading = section.settings.heading
  assign container = section.settings.container
  assign products_per_tab = section.settings.products_per_tab
  assign products_per_row_desktop = section.settings.products_per_row_desktop
  assign products_per_row_mobile = section.settings.products_per_row_mobile
  assign cards_per_view_desktop = section.settings.cards_per_view_desktop | default: products_per_row_desktop
%}

{% capture children %}
  <div id="shop-by-concern-{{ section_id }}" class="shop-by-concern">
    <div class="shop-by-concern__container container container--{{ container }}">
      {%- if heading != blank -%}
        <h2 class="shop-by-concern__heading">{{ heading }}</h2>
      {%- endif -%}

      {%- if section.blocks.size > 0 -%}
        <div class="shop-by-concern__tabs" role="tablist" aria-label="Collections tabs">
          <div class="shop-by-concern__tabs-scroll">
            {%- for block in section.blocks -%}
              {%- assign col = block.settings.collection -%}
              {%- assign is_active = forloop.first -%}
              <button
                id="tab-{{ section_id }}-{{ forloop.index }}"
                class="shop-by-concern__tab{% if is_active %} is-active{% endif %}"
                role="tab"
                aria-selected="{{ is_active }}"
                aria-controls="panel-{{ section_id }}-{{ forloop.index }}"
                tabindex="{% if is_active %}0{% else %}-1{% endif %}"
                {{ block.shopify_attributes }}
              >
                {{ block.settings.custom_label | default: col.title | escape }}
              </button>
            {%- endfor -%}
          </div>
        </div>

        <div class="shop-by-concern__panels">
          {%- for block in section.blocks -%}
            {%- assign col = block.settings.collection -%}
            {%- assign is_active = forloop.first -%}
            <div
              id="panel-{{ section_id }}-{{ forloop.index }}"
              class="shop-by-concern__panel{% if is_active %} is-active{% endif %}"
              role="tabpanel"
              aria-labelledby="tab-{{ section_id }}-{{ forloop.index }}"
              {% unless is_active %}hidden{% endunless %}
              {{ block.shopify_attributes }}
            >
              {%- if col -%}
                <button class="shop-by-concern__nav shop-by-concern__nav--prev" type="button" aria-label="Previous products" data-prev>
                  &lsaquo;
                </button>
                <button class="shop-by-concern__nav shop-by-concern__nav--next" type="button" aria-label="Next products" data-next>
                  &rsaquo;
                </button>
                <div class="shop-by-concern__grid" data-grid>
                  {%- for product in col.products limit: products_per_tab -%}
                    <article class="shop-by-concern__card" data-product-id="{{ product.id }}">
                      <a class="shop-by-concern__image-link" href="{{ product.url }}" aria-label="{{ product.title | escape }}">
                        {%- if product.featured_media -%}
                          <img
                            class="shop-by-concern__image"
                            src="{{ product.featured_media | image_url: width: 600 }}"
                            srcset="{{ product.featured_media | image_url: width: 300 }} 300w, {{ product.featured_media | image_url: width: 450 }} 450w, {{ product.featured_media | image_url: width: 600 }} 600w, {{ product.featured_media | image_url: width: 900 }} 900w"
                            sizes="(max-width: 749px) 70vw, 25vw"
                            alt="{{ product.featured_media.alt | escape }}"
                            loading="lazy"
                            width="{{ product.featured_media.width }}"
                            height="{{ product.featured_media.height }}"
                          />
                        {%- else -%}
                          <div class="shop-by-concern__placeholder">{{ 'product-1' | placeholder_svg_tag }}</div>
                        {%- endif -%}
                      </a>
                      <div class="shop-by-concern__details">
                        <a class="shop-by-concern__title" href="{{ product.url }}">{{ product.title }}</a>
                        <div class="shop-by-concern__price">
                          {% render 'price', product_resource: product %}
                        </div>
                        <form class="shop-by-concern__form" method="post" action="{{ routes.cart_add_url }}">
                          {%- if product.variants.size > 1 -%}
                            <label class="visually-hidden" for="variant-{{ section_id }}-{{ forloop.index }}">Select variant</label>
                            <select class="shop-by-concern__variant"
                                    id="variant-{{ section_id }}-{{ forloop.index }}"
                                    name="id"
                                    aria-label="Select variant for {{ product.title | escape }}">
                              {%- for variant in product.variants -%}
                                <option value="{{ variant.id }}" {% if variant == product.selected_or_first_available_variant %}selected{% endif %} {% unless variant.available %}disabled{% endunless %}>
                                  {{ variant.title }}{% unless variant.available %} - {{ 'products.product.sold_out' | t }}{% endunless %}
                                </option>
                              {%- endfor -%}
                            </select>
                          {%- else -%}
                            <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" />
                          {%- endif -%}
                          <input type="hidden" name="quantity" value="1" />
                          <button type="submit" class="shop-by-concern__atc" {% unless product.available %}disabled{% endunless %}>
                            {%- if product.available -%}
                              {{ 'products.product.add_to_cart' | t | default: 'Add to cart' }}
                            {%- else -%}
                              {{ 'products.product.sold_out' | t | default: 'Sold out' }}
                            {%- endif -%}
                          </button>
                        </form>
                      </div>
                    </article>
                  {%- endfor -%}
                </div>
              {%- else -%}
                <div class="shop-by-concern__empty">{{ 'content.no_products_found' | t }}</div>
              {%- endif -%}
            </div>
          {%- endfor -%}
        </div>
      {%- endif -%}
    </div>
  </div>
{% endcapture %}

{% render 'section', section: section, children: children %}

<script>
    (function(){
      var root = document.getElementById('shop-by-concern-{{ section_id }}');
      if (!root) return;
      var tabs = Array.prototype.slice.call(root.querySelectorAll('.shop-by-concern__tab'));
      var panels = Array.prototype.slice.call(root.querySelectorAll('.shop-by-concern__panel'));

      function activateTab(tab){
        var target = tab.getAttribute('aria-controls');
        tabs.forEach(function(t){
          var selected = t === tab;
          t.classList.toggle('is-active', selected);
          t.setAttribute('aria-selected', selected ? 'true' : 'false');
          t.setAttribute('tabindex', selected ? '0' : '-1');
        });
        panels.forEach(function(p){
          var isTarget = p.id === target;
          p.classList.toggle('is-active', isTarget);
          if (isTarget) {
            p.removeAttribute('hidden');
          } else {
            p.setAttribute('hidden', '');
          }
        });
      }

      tabs.forEach(function(tab){
        tab.addEventListener('click', function(){ activateTab(tab); });
        tab.addEventListener('keydown', function(e){
          var idx = tabs.indexOf(tab);
          if (e.key === 'ArrowRight') {
            e.preventDefault();
            var next = tabs[(idx + 1) % tabs.length];
            next.focus(); activateTab(next);
          } else if (e.key === 'ArrowLeft') {
            e.preventDefault();
            var prev = tabs[(idx - 1 + tabs.length) % tabs.length];
            prev.focus(); activateTab(prev);
          }
        });
      });

      // Desktop carousel arrows: scroll by one viewport of cards
      function setupArrows(panel){
        var grid = panel.querySelector('[data-grid]');
        var prev = panel.querySelector('[data-prev]');
        var next = panel.querySelector('[data-next]');
        if (!grid || !prev || !next) return;

        function getScrollAmount(){
          var card = grid.querySelector('.shop-by-concern__card');
          var cardWidth = card ? card.getBoundingClientRect().width : (grid.clientWidth / 4);
          var gap = 16; // aligned with --grid-gap default
          return Math.max(cardWidth * {{ cards_per_view_desktop | default: 4 }} + gap, 200);
        }

        prev.addEventListener('click', function(){
          grid.scrollBy({ left: -getScrollAmount(), behavior: 'smooth' });
        });
        next.addEventListener('click', function(){
          grid.scrollBy({ left: getScrollAmount(), behavior: 'smooth' });
        });
      }

      panels.forEach(setupArrows);
      panels.forEach(function(panel){
        var grid = panel.querySelector('[data-grid]');
        if (!grid || grid.__wheelHandlerAttached) {
          return;
        }

                grid.addEventListener('wheel', function(event) {
          if (event.defaultPrevented) {
            return;
          }

          var canScrollHorizontally = (grid.scrollWidth - grid.clientWidth) > 1;
          if (!canScrollHorizontally) {
            return;
          }

          var deltaY = event.deltaMode === 1 ? event.deltaY * 16 : event.deltaY;
          var deltaX = event.deltaMode === 1 ? event.deltaX * 16 : event.deltaX;
          var absDeltaY = Math.abs(deltaY);
          var absDeltaX = Math.abs(deltaX);

          var useVertical = absDeltaY >= absDeltaX;
          var appliedDelta = deltaY;

          if (!useVertical && absDeltaX > 0) {
            // Browsers sometimes emit horizontal deltas when the user scrolls vertically inside a horizontal scroller.
            useVertical = true;
            appliedDelta = deltaX;
          }

          if (!useVertical) {
            return;
          }

          if (typeof window.scrollBy === 'function') {
            window.scrollBy({ top: appliedDelta, left: 0, behavior: 'auto' });
          } else {
            window.scrollTo(0, window.pageYOffset + appliedDelta);
          }

          event.preventDefault();
        }, { passive: false });

        grid.__wheelHandlerAttached = true;
      });

      // AJAX Add to Cart handling (progressive enhancement)
      root.addEventListener('submit', function(e){
        var form = e.target.closest('.shop-by-concern__form');
        if (!form) return;
        e.preventDefault();

        var button = form.querySelector('.shop-by-concern__atc');
        if (button && button.disabled) return;

        var formData = new FormData(form);
        var id = formData.get('id');
        var qty = parseInt(formData.get('quantity') || '1', 10) || 1;
        if (!id) return;

        if (button) { button.disabled = true; button.textContent = 'Adding...'; }

        fetch('{{ routes.cart_add_url | append: '.js' }}', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: id, quantity: qty })
        }).then(function(res){
          if (!res.ok) throw new Error('Add to cart failed');
          return res.json();
        }).then(function(){
          if (button) { button.textContent = 'Added'; }
          // Update cart bubble immediately
          return fetch('/cart.js').then(function(res){
            if (!res.ok) throw new Error('Failed to fetch cart');
            return res.json();
          }).then(function(cart){
            var count = cart && typeof cart.item_count === 'number' ? cart.item_count : 0;
            var eventDetail = {
              resource: cart,
              sourceId: 'shop-by-concern-{{ section_id }}',
              data: {
                itemCount: count,
                source: 'shop-by-concern',
              },
            };

            document.dispatchEvent(new CustomEvent('cart:update', { detail: eventDetail, bubbles: true }));

            document
              .querySelectorAll('[data-cart-count], .cart-count, .cart-count-bubble__count, .cart-count-bubble span')
              .forEach(function(el){
                if (el.hasAttribute && el.hasAttribute('data-cart-count')) {
                  el.setAttribute('data-cart-count', String(count));
                }
                if ('textContent' in el) {
                  el.textContent = String(count);
                }
              });
            document.dispatchEvent(new CustomEvent('cart:updated', { detail: cart }));
          }).catch(function(){ /* ignore bubble update errors */ });
        }).finally(function(){
          setTimeout(function(){ if (button) { button.textContent = 'Add to cart'; button.disabled = false; } }, 1500);
        }).catch(function(){
          if (button) { button.textContent = 'Error'; setTimeout(function(){ button.textContent = 'Add to cart'; button.disabled = false; }, 1500); }
        });
      });
    })();
  </script>

  <style>
    #shop-by-concern-{{ section_id }} .shop-by-concern__container {
      margin-inline: auto;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__heading {
      margin: 0 0 1rem 0;
      text-align: left;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__tabs {
      overflow: hidden;
      margin-bottom: 1rem;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__tabs-scroll {
      display: flex;
      gap: .5rem;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: thin;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__tab {
      white-space: nowrap;
      padding: .6rem 1rem;
      border: 1px solid rgba(0,0,0,.12);
      border-radius: 999px;
      background: var(--color-background, #fff);
      cursor: pointer;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__tab.is-active {
      background: var(--color-foreground, #111);
      color: var(--color-background, #fff);
      border-color: var(--color-foreground, #111);
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__grid {
      display: grid;
      gap: var(--grid-gap, 16px);
      grid-template-columns: repeat({{ products_per_row_mobile }}, minmax(0, 1fr));
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__card {
      background: var(--color-background, #fff);
      border: 1px solid rgba(0,0,0,.06);
      border-radius: 12px;
      overflow: hidden;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__image-link {
      display: block;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__image {
      display: block;
      width: 100%;
      height: auto;
      max-width: 100%;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__details {
      padding: .75rem;
      display: grid;
      gap: .5rem;
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__variant {
      width: 100%;
      padding: .5rem .6rem;
      border: 1px solid rgba(0,0,0,.12);
      border-radius: 6px;
      background: var(--color-background, #fff);
    }
    #shop-by-concern-{{ section_id }} .shop-by-concern__atc {
      width: 100%;
      margin-top: .5rem;
      padding: .6rem .8rem;
      border-radius: 8px;
      background: var(--color-foreground, #111);
      color: var(--color-background, #fff);
      border: 0;
      cursor: pointer;
    }
    @media (min-width: 768px) {
      /* Make desktop a horizontally scrollable strip */
      #shop-by-concern-{{ section_id }} .shop-by-concern__grid {
        display: flex;
        overflow-x: auto;
        gap: var(--grid-gap, 16px);
        -webkit-overflow-scrolling: touch;
        padding-bottom: .25rem;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__panel { position: relative; overflow: hidden; }
      #shop-by-concern-{{ section_id }} .shop-by-concern__nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        border-radius: 999px;
        display: grid;
        place-items: center;
        background: rgba(255,255,255,.9);
        border: 1px solid rgba(0,0,0,.08);
        cursor: pointer;
        z-index: 2;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__nav--prev { left: 0.75rem; }
      #shop-by-concern-{{ section_id }} .shop-by-concern__nav--next { right: 0.75rem; }
      #shop-by-concern-{{ section_id }} .shop-by-concern__nav:hover { background: #fff; }
      #shop-by-concern-{{ section_id }} .shop-by-concern__card {
        /* Show roughly N cards per viewport width, but allow scrolling */
        flex: 0 0 calc(100% / {{ cards_per_view_desktop }} - var(--grid-gap, 16px));
        min-width: 280px;
      }
    }
    @media (max-width: 749px) {
      #shop-by-concern-{{ section_id }} {
        overflow-x: hidden;
        overflow-y: visible;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__container {
        padding-inline: 1rem;
        width: 100%;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__heading {
        font-size: clamp(1.35rem, 6vw, 1.9rem);
        line-height: 1.2;
        margin-bottom: 0.75rem;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__tabs {
        margin: 0 -0.75rem 0.75rem;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__tabs-scroll {
        padding-inline: 0.75rem;
        gap: 0.5rem;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-x: contain;
        scrollbar-width: none;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__tabs-scroll::-webkit-scrollbar {
        display: none;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__tab {
        font-size: clamp(0.85rem, 3.5vw, 1rem);
        padding: 0.45rem 0.95rem;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__panels {
        overflow: visible;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__grid {
        display: flex;
        gap: 0.75rem;
        padding: 0 0.75rem 1rem;
        margin: 0 -0.75rem;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-x: contain;
        scrollbar-width: none;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__grid::-webkit-scrollbar {
        display: none;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__card {
        flex: 0 0 clamp(72%, 78vw, 280px);
        width: clamp(72%, 78vw, 280px);
        min-width: 0;
      }
      #shop-by-concern-{{ section_id }} .shop-by-concern__nav {
        display: none;
      }
    }
  </style>

{% schema %}
{
  "name": "Shop by Concern Tabs",
  "tag": "section",
  "class": "shop-by-concern-section",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Shop by concern" },
    {
      "type": "select",
      "id": "container",
      "label": "Container width",
      "default": "lg",
      "options": [
        { "value": "sm", "label": "Small" },
        { "value": "md", "label": "Medium" },
        { "value": "lg", "label": "Large" },
        { "value": "xl", "label": "Full width" }
      ]
    },
    {
      "type": "range",
      "id": "products_per_tab",
      "min": 2,
      "max": 50,
      "step": 1,
      "label": "Products per tab",
      "default": 8
    },
    {
      "type": "range",
      "id": "products_per_row_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Columns on mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "products_per_row_desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "cards_per_view_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Cards per view (mobile carousel)",
      "default": 2
    },
    {
      "type": "range",
      "id": "cards_per_view_desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Cards per view (desktop carousel)",
      "default": 4
    },
    {
      "type": "select",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "default",
      "options": [
        { "value": "default", "label": "Default" },
        { "value": "soft", "label": "Soft" },
        { "value": "contrast", "label": "Contrast" }
      ]
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name": "Collection tab",
      "limit": 12,
      "settings": [
        { "type": "collection", "id": "collection", "label": "Collection" },
        { "type": "text", "id": "custom_label", "label": "Tab label (optional)" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Shop by Concern Tabs",
      "category": "Collection",
      "blocks": [
        { "type": "collection" },
        { "type": "collection" },
        { "type": "collection" }
      ]
    }
  ]
}
{% endschema %}

{% stylesheet %}
/* Additional theme editor scoped styles can go here if needed */
{% endstylesheet %}


